function G(j,k){return k.map((q)=>q/j*100)}class F{canvas;ctx;dropZone;fileInput;previewLine;clearBtn;undoBtn;rulersList;imageInfo;currentImage=null;rulers=[];imageScale=1;imageOffsetX=0;imageOffsetY=0;displayedImageWidth=0;displayedImageHeight=0;constructor(){this.canvas=document.getElementById("imageCanvas"),this.ctx=this.canvas.getContext("2d"),this.dropZone=document.getElementById("dropZone"),this.fileInput=document.getElementById("fileInput"),this.previewLine=document.getElementById("previewLine"),this.clearBtn=document.getElementById("clearBtn"),this.undoBtn=document.getElementById("undoBtn"),this.rulersList=document.getElementById("rulersList"),this.imageInfo=document.getElementById("imageInfo"),this.initializeEventListeners()}initializeEventListeners(){this.dropZone.addEventListener("dragover",this.handleDragOver.bind(this)),this.dropZone.addEventListener("dragleave",this.handleDragLeave.bind(this)),this.dropZone.addEventListener("drop",this.handleDrop.bind(this)),this.dropZone.addEventListener("click",this.handleDropZoneClick.bind(this)),this.fileInput.addEventListener("change",this.handleFileSelect.bind(this)),document.addEventListener("paste",this.handlePaste.bind(this)),this.canvas.addEventListener("click",this.handleCanvasClick.bind(this)),this.canvas.addEventListener("mousemove",this.handleCanvasMouseMove.bind(this)),this.canvas.addEventListener("mouseleave",this.handleCanvasMouseLeave.bind(this)),this.clearBtn.addEventListener("click",this.clearRulers.bind(this)),this.undoBtn.addEventListener("click",this.undoLastRuler.bind(this)),document.addEventListener("keydown",this.handleKeyDown.bind(this)),window.addEventListener("resize",this.handleResize.bind(this))}handleDragOver(j){j.preventDefault(),this.dropZone.classList.add("drag-over")}handleDragLeave(j){j.preventDefault(),this.dropZone.classList.remove("drag-over")}handleDrop(j){j.preventDefault(),this.dropZone.classList.remove("drag-over");let k=j.dataTransfer?.files;if(k&&k.length>0)this.loadImageFile(k[0])}handleDropZoneClick(j){console.log("Drop zone clicked!"),j.preventDefault(),j.stopPropagation(),console.log("Triggering file input..."),this.fileInput.click()}handleFileSelect(j){console.log("File input changed!");let k=j.target,q=k.files;if(console.log("Selected files:",q),q&&q.length>0)console.log("Loading file:",q[0].name),this.loadImageFile(q[0]),k.value=""}handlePaste(j){let k=j.clipboardData?.items;if(!k)return;for(let q of Array.from(k))if(q.type.startsWith("image/")){let A=q.getAsFile();if(A){this.loadImageFile(A);break}}}handleCanvasClick(j){if(!this.currentImage)return;let k=this.canvas.getBoundingClientRect(),q=j.clientX-k.left,B=(j.clientY-k.top-this.imageOffsetY)/this.imageScale;if(B>=0&&B<=this.currentImage.naturalHeight)this.addRuler(B)}handleCanvasMouseMove(j){if(!this.currentImage)return;let k=this.canvas.getBoundingClientRect(),q=j.clientY-k.top,A=(q-this.imageOffsetY)/this.imageScale;if(A>=0&&A<=this.currentImage.naturalHeight)this.previewLine.style.display="block",this.previewLine.style.top=`${q}px`;else this.previewLine.style.display="none"}handleCanvasMouseLeave(){this.previewLine.style.display="none"}handleKeyDown(j){if(j.key==="Escape")this.clearRulers();else if((j.ctrlKey||j.metaKey)&&j.key==="z")j.preventDefault(),this.undoLastRuler()}handleResize(){if(this.currentImage)this.drawImage()}loadImageFile(j){if(!j.type.startsWith("image/")){alert("Please select a valid image file.");return}let k=new FileReader;k.onload=(q)=>{let A=new Image;A.onload=()=>{this.currentImage=A,this.clearRulers(),this.drawImage(),this.updateImageInfo(),this.showCanvas()},A.src=q.target?.result},k.readAsDataURL(j)}showCanvas(){this.dropZone.style.display="none",this.canvas.style.display="block"}drawImage(){if(!this.currentImage)return;let k=this.canvas.parentElement.getBoundingClientRect().width-40,q=window.innerHeight-250,A=k/this.currentImage.naturalWidth,B=q/this.currentImage.naturalHeight,C=0.5,E=2;this.imageScale=Math.max(C,Math.min(A,B,E)),this.displayedImageWidth=this.currentImage.naturalWidth*this.imageScale,this.displayedImageHeight=this.currentImage.naturalHeight*this.imageScale,this.canvas.width=this.displayedImageWidth,this.canvas.height=this.displayedImageHeight,this.imageOffsetX=0,this.imageOffsetY=0,this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.drawImage(this.currentImage,0,0,this.displayedImageWidth,this.displayedImageHeight),this.drawRulers()}addRuler(j){if(j=Math.round(j),this.rulers.find((E)=>Math.abs(E.y-j)<3))return;let q=this.rulers.length>0?this.rulers[this.rulers.length-1].y:0,A=j-q,B=G(this.currentImage.naturalHeight,[A])[0],C={y:j,height:A,percentage:B};this.rulers.push(C),this.updateRulersList(),this.updateButtonStates(),this.drawRulers()}drawRulers(){if(!this.currentImage)return;this.canvas.parentElement.querySelectorAll(".ruler-line, .ruler-label").forEach((k)=>k.remove()),this.rulers.forEach((k,q)=>{let A=k.y*this.imageScale+this.imageOffsetY,B=document.createElement("div");B.className="ruler-line placed",B.style.top=`${A}px`,this.canvas.parentElement.appendChild(B);let C=document.createElement("div");C.className="ruler-label",C.style.top=`${A-15}px`,C.style.left=`${this.displayedImageWidth+10}px`,C.innerHTML=`y: <span class="ruler-y">${k.y}px</span> — h: <span class="ruler-height">${k.height}px</span> — <span class="ruler-percentage">${k.percentage.toFixed(3)}%</span>`,this.canvas.parentElement.appendChild(C)})}updateRulersList(){if(this.rulers.length===0){this.rulersList.innerHTML='<p class="no-rulers">No rulers placed yet</p>';return}let j="";this.rulers.forEach((k,q)=>{j+=`
        <div class="ruler-item">
          <div class="ruler-index">Ruler ${q+1}</div>
          <div class="ruler-details">
            y: <span class="ruler-y">${k.y}px</span><br>
            h: <span class="ruler-height">${k.height}px</span><br>
            %: <span class="ruler-percentage">${k.percentage.toFixed(3)}%</span>
          </div>
        </div>
      `}),this.rulersList.innerHTML=j}updateImageInfo(){if(!this.currentImage){this.imageInfo.innerHTML="<p>No image loaded</p>";return}this.imageInfo.innerHTML=`
      <div><span class="info-label">Original Size:</span><span class="info-value">${this.currentImage.naturalWidth} × ${this.currentImage.naturalHeight}px</span></div>
      <div><span class="info-label">Displayed Size:</span><span class="info-value">${Math.round(this.displayedImageWidth)} × ${Math.round(this.displayedImageHeight)}px</span></div>
      <div><span class="info-label">Scale Factor:</span><span class="info-value">${(this.imageScale*100).toFixed(1)}%</span></div>
      <div><span class="info-label">Rulers:</span><span class="info-value">${this.rulers.length}</span></div>
    `}updateButtonStates(){this.clearBtn.disabled=this.rulers.length===0,this.undoBtn.disabled=this.rulers.length===0,this.updateImageInfo()}clearRulers(){this.rulers=[],this.updateRulersList(),this.updateButtonStates(),this.drawRulers()}undoLastRuler(){if(this.rulers.length>0)this.rulers.pop(),this.updateRulersList(),this.updateButtonStates(),this.drawRulers()}}document.addEventListener("DOMContentLoaded",()=>{new F});

//# debugId=1E998F6C81B674B364756E2164756E21
//# sourceMappingURL=index.js.map
